name: API Automation Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment (dev, qa, stage, prod)'
        required: true
        default: 'dev'

env:
  TARGET_ENV: ${{ github.event.inputs.environment }}

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Set BASE_URL from selected environment
        run: |
          echo "Selected environment: ${{ env.TARGET_ENV }}"
          if [ "${{ env.TARGET_ENV }}" = "prod" ]; then
            echo "BASE_URL=https://bookstore.yourdomain.com" >> $GITHUB_ENV
          elif [ "${{ env.TARGET_ENV }}" = "stage" ]; then
            echo "BASE_URL=http://stage.bookstore.internal" >> $GITHUB_ENV
          elif [ "${{ env.TARGET_ENV }}" = "qa" ]; then
            echo "BASE_URL=http://qa.bookstore.internal" >> $GITHUB_ENV
          else
            echo "BASE_URL=http://127.0.0.1:8000" >> $GITHUB_ENV
          fi

      - name: Build FastAPI Docker image (for dev only)
        if: ${{ env.TARGET_ENV == 'dev' }}
        run: docker build -t bookstore-api ./bookstore

      - name: Run FastAPI Docker container (for dev only)
        if: ${{ env.TARGET_ENV == 'dev' }}
        run: docker run -d -p 8000:8000 --name bookstore-api bookstore-api

      - name: Wait for FastAPI to be ready (for dev only)
        if: ${{ env.TARGET_ENV == 'dev' }}
        run: |
          echo "Waiting for API to be available..."
          sleep 10
          curl --retry 10 --retry-delay 3 --retry-connrefused $BASE_URL/health

      - name: Run Rest Assured tests
        run: mvn clean test
        env:
          BASE_URL: ${{ env.BASE_URL }}

      - name: Check if Allure results were generated
        run: ls -la allure-results || echo "No allure-results directory found"

      - name: Generate Allure report
        run: mvn io.qameta.allure:allure-maven:report

      - name: Upload Allure report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: target/allure-report

      - name: Upload TestNG reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: target/surefire-reports

      - name: Stop and remove Docker container (for dev only)
        if: ${{ always() && env.TARGET_ENV == 'dev' }}
        run: |
          docker stop bookstore-api || true
          docker rm bookstore-api || true
