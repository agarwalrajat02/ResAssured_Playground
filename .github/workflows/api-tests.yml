name: API Automation Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment (dev, qa, stage, prod)'
        required: true
        default: 'dev'

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      TARGET_ENV: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Set BASE_URL from selected environment
        run: |
          echo "Selected environment: $TARGET_ENV"
          if [ "$TARGET_ENV" = "prod" ]; then
            echo "BASE_URL=https://bookstore.yourdomain.com" >> $GITHUB_ENV
          elif [ "$TARGET_ENV" = "stage" ]; then
            echo "BASE_URL=http://stage.bookstore.internal" >> $GITHUB_ENV
          elif [ "$TARGET_ENV" = "qa" ]; then
            echo "BASE_URL=http://qa.bookstore.internal" >> $GITHUB_ENV
          else
            echo "BASE_URL=http://127.0.0.1:8000" >> $GITHUB_ENV
          fi

      - name: Build FastAPI Docker image (for dev only)
        if: env.TARGET_ENV == 'dev'
        run: docker build -t bookstore-api ./bookstore

      - name: Run FastAPI Docker container (for dev only)
        if: env.TARGET_ENV == 'dev'
        run: docker run -d -p 8000:8000 --name bookstore-api bookstore-api

      - name: Wait for FastAPI to be ready (for dev only)
        if: env.TARGET_ENV == 'dev'
        run: |
          echo "Waiting for API to be available..."
          for i in {1..30}; do
            if curl -s $BASE_URL/health; then
              echo "API is up!"
              break
            fi
            echo "Not ready yet. Retrying..."
            sleep 3
          done

      - name: Install Allure CLI
        run: npm install -g allure-commandline --save-dev

      - name: Run Rest Assured tests with testng.xml
        run: mvn clean test -DsuiteXmlFile=testng.xml
        env:
          BASE_URL: ${{ env.BASE_URL }}

      - name: Debug Allure Results Directory
        run: |
          echo "Contents of allure-results directory:"
          if [ -d "allure-results" ]; then
            ls -la allure-results
          else
            echo "❌ 'allure-results' directory not found!"
          fi

      - name: Generate Allure Report using CLI
        run: |
          if [ -d "allure-results" ] && [ "$(ls -A allure-results)" ]; then
            allure generate allure-results --clean -o allure-report
          else
            echo "⚠️ Skipping Allure report generation: No results found."
          fi

      - name: Upload Allure Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report
          if-no-files-found: warn

      - name: Upload TestNG Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: target/surefire-reports

      - name: Stop and remove Docker container (for dev only)
        if: always() && env.TARGET_ENV == 'dev'
        run: |
          docker stop bookstore-api || true
          docker rm bookstore-api || true
